# This workflow builds a Docker artifact, caches it based on the Dockerfile content,
# and then runs e2e tests using that artifact.

name: E2E Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # 1. Set up Python and Tox, which are needed for the test step
      - name: Set up Python
        run: |
          echo uv
          curl -LsSf https://astral.sh/uv/install.sh | sh
          chmod +x $HOME/.local/bin/uv $HOME/.local/bin/uvx
          uv self update
          uvx --version
          echo python
          uv python install 3.12 --default
          python --version

      # 2. Cache the binary artifact
      # The key is based on the runner's OS and the hash of the Dockerfile.
      # If the Dockerfile changes, the hash changes, and a new cache is created.
      - name: Cache vLLM-sim binary
        id: cache-vllm-sim
        uses: actions/cache@v4
        with:
          # The path to the file you want to cache
          path: bin/llm-d-inference-sim
          # The unique key for the cache
          key: vllm-sim-binary-${{ runner.os }}-${{ hashFiles('tests/e2e/vllm-sim.Dockerfile') }}

      # 3. Set up Docker Buildx (required for the 'docker build -o' command)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Conditionally build the artifact
      # This step only runs if the cache step above did NOT find a match.
      # 'steps.cache-vllm-sim.outputs.cache-hit' will be 'true' if the cache was restored.
      - name: Build vLLM-sim artifact (if not cached)
        if: steps.cache-vllm-sim.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss. Building artifact..."
          docker build . -f tests/e2e/vllm-sim.Dockerfile -o type=local,dest=./
        shell: bash

      - name: Verify artifact
        run: |
          if [ -f "bin/llm-d-inference-sim" ]; then
            echo "Artifact found."
          else
            echo "ERROR: Artifact bin/llm-d-inference-sim not found!"
            exit 1
          fi
        shell: bash

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/
          key: ${{ runner.os }}
          restore-keys: |
            ${{ runner.os }}

      # 5. Run the e2e tests
      # This step runs every time, using either the restored cache or the freshly built artifact.
      - name: Run E2E tests
        run: uvx --with tox-uv tox -e test-e2e
        shell: bash
